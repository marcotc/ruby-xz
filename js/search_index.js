var search_data = {"index":{"searchIndex":["xz","lzmaerror","lzmastream","liblzma","stream","streamreader","streamwriter","close()","close()","disable_deprecation_notices=()","finish()","finish()","new()","new()","new()","new()","open()","open()","pos()","pos()","raise_if_necessary()","rewind()","tell()","tell()","authors","copying","history","readme"],"longSearchIndex":["xz","xz::lzmaerror","xz::lzmastream","xz::liblzma","xz::stream","xz::streamreader","xz::streamwriter","xz::streamreader#close()","xz::streamwriter#close()","xz::disable_deprecation_notices=()","xz::streamreader#finish()","xz::streamwriter#finish()","xz::lzmastream::new()","xz::stream::new()","xz::streamreader::new()","xz::streamwriter::new()","xz::streamreader::open()","xz::streamwriter::open()","xz::streamreader#pos()","xz::streamwriter#pos()","xz::lzmaerror::raise_if_necessary()","xz::streamreader#rewind()","xz::streamreader#tell()","xz::streamwriter#tell()","","","",""],"info":[["XZ","","XZ.html","","<p>The namespace and main module of this library. Each method of this module\nmay raise exceptions of class …\n"],["XZ::LZMAError","","XZ/LZMAError.html","","<p>The class of the error that this library raises.\n"],["XZ::LZMAStream","","XZ/LZMAStream.html","","<p>The main struct of the liblzma library.\n"],["XZ::LibLZMA","","XZ/LibLZMA.html","","<p>This module wraps functions and enums used by liblzma.\n"],["XZ::Stream","","XZ/Stream.html","","<p>The base class for XZ::StreamReader and XZ::StreamWriter. This is an\nabstract class that is not meant …\n"],["XZ::StreamReader","","XZ/StreamReader.html","","<p>An IO-like reader class for XZ-compressed data, allowing you to access\nXZ-compressed data as if it was …\n"],["XZ::StreamWriter","","XZ/StreamWriter.html","","<p>An IO-like writer class for XZ-compressed data, allowing you to write\nuncompressed data to a stream which …\n"],["close","XZ::StreamReader","XZ/StreamReader.html#method-i-close","()","<p>Closes this StreamReader instance. Don’t use it afterwards anymore.\n<p>Return value\n<p>The total number of bytes …\n"],["close","XZ::StreamWriter","XZ/StreamWriter.html#method-i-close","()","<p>Closes this StreamWriter instance and flushes all internal buffers. Don’t\nuse it afterwards anymore. …\n"],["disable_deprecation_notices=","XZ","XZ.html#method-c-disable_deprecation_notices-3D","(bool)","<p>Force ruby-xz to be silent about deprecations. Using this is discouraged so\nthat you are aware of upcoming …\n"],["finish","XZ::StreamReader","XZ/StreamReader.html#method-i-finish","()","<p>If called in the block form of ::new or ::open, prevents the wrapped IO\nfrom being closed, only the  …\n"],["finish","XZ::StreamWriter","XZ/StreamWriter.html#method-i-finish","()","<p>If called in the block form of ::new or ::open, prevents the wrapped IO\nfrom being closed, only the  …\n"],["new","XZ::LZMAStream","XZ/LZMAStream.html#method-c-new","(*args)","<p>This method does basicly the same thing as the LZMA_STREAM_INIT macro of\nliblzma. Creates a new LZMAStream …\n"],["new","XZ::Stream","XZ/Stream.html#method-c-new","(delegate_io)","<p>Creates a new instance of this class. Don’t use this directly, it’s only\ncalled by subclasses’ ::new …\n"],["new","XZ::StreamReader","XZ/StreamReader.html#method-c-new","(delegate, *args)","<p>Creates a new StreamReader instance. If you pass an IO, remember you have\nto close <strong>both</strong> the resulting …\n"],["new","XZ::StreamWriter","XZ/StreamWriter.html#method-c-new","(delegate, compression_level = 6, *args, &block)","<p>Creates a new StreamWriter instance. The block form automatically calls the\n#close method when the block …\n"],["open","XZ::StreamReader","XZ/StreamReader.html#method-c-open","(filename, *args, &block)","<p>Opens a file from disk and wraps an XZ::StreamReader instance around the\nresulting File IO object. This …\n"],["open","XZ::StreamWriter","XZ/StreamWriter.html#method-c-open","(filename, compression_level = 6, *args, &block)","<p>Opens a file from disk and wraps an XZ::StreamWriter instance around the\nresulting file IO object. This …\n"],["pos","XZ::StreamReader","XZ/StreamReader.html#method-i-pos","()","<p>Total number of output bytes provided to you yet.\n"],["pos","XZ::StreamWriter","XZ/StreamWriter.html#method-i-pos","()","<p>Total number of input bytes read so far from what you supplied to any\nwriter method.\n"],["raise_if_necessary","XZ::LZMAError","XZ/LZMAError.html#method-c-raise_if_necessary","(val)","<p>Raises an appropriate exception if <code>val</code> isn&#39;t a liblzma\nsuccess code.\n"],["rewind","XZ::StreamReader","XZ/StreamReader.html#method-i-rewind","()","<p>Instrcuts liblzma to immediately stop decompression, rewinds the wrapped IO\nobject and reinitalizes the …\n"],["tell","XZ::StreamReader","XZ/StreamReader.html#method-i-tell","()",""],["tell","XZ::StreamWriter","XZ/StreamWriter.html#method-i-tell","()",""],["AUTHORS","","AUTHORS.html","","<p>List of contributors\n<p>All the people who worked on this project, in alphabetical order.\n<p>Lars Christensen …\n"],["COPYING","","COPYING.html","","<p>(The MIT License)\n<p>Basic liblzma-bindings for Ruby.\n<p>Copyright © 2011-2014 Marvin Gülker et al.\n"],["HISTORY","","HISTORY_rdoc.html","","<p>Version history\n<p>0.2.2 (2015-12-27)\n<p><strong>Add</strong> XZ.disable_deprecation_notes\n"],["README","","README_md.html","","<p>ruby-xz\n<p><strong>ruby-xz</strong> is a basic binding to the famous liblzma\nlibrary,\nbest known for the extreme compression-ratio ...\n"]]}}