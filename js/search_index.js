var search_data = {"index":{"searchIndex":["xz","lzmaerror","lzmastream","liblzma","stream","streamreader","streamwriter","close()","close()","compress()","compress_file()","compress_stream()","decode_stream()","decompress()","decompress_file()","decompress_stream()","encode_stream()","new()","new()","new()","new()","pos()","pos()","raise_if_necessary()","rewind()","tell()","tell()","copying","history","readme"],"longSearchIndex":["xz","xz::lzmaerror","xz::lzmastream","xz::liblzma","xz::stream","xz::streamreader","xz::streamwriter","xz::streamreader#close()","xz::streamwriter#close()","xz::compress()","xz::compress_file()","xz::compress_stream()","xz::decode_stream()","xz::decompress()","xz::decompress_file()","xz::decompress_stream()","xz::encode_stream()","xz::lzmastream::new()","xz::stream::new()","xz::streamreader::new()","xz::streamwriter::new()","xz::streamreader#pos()","xz::streamwriter#pos()","xz::lzmaerror::raise_if_necessary()","xz::streamreader#rewind()","xz::streamreader#tell()","xz::streamwriter#tell()","","",""],"info":[["XZ","","XZ.html","","<p>The namespace and main module of this library. Each method of this module\nmay raise exceptions of class …\n"],["XZ::LZMAError","","XZ/LZMAError.html","","<p>The class of the error that this library raises.\n"],["XZ::LZMAStream","","XZ/LZMAStream.html","","<p>The main struct of the liblzma library.\n"],["XZ::LibLZMA","","XZ/LibLZMA.html","","<p>This module wraps functions and enums used by liblzma.\n"],["XZ::Stream","","XZ/Stream.html","","<p>The base class for XZ::StreamReader and XZ::StreamWriter. This is an\nabstract class that is not meant …\n"],["XZ::StreamReader","","XZ/StreamReader.html","","<p>An IO-like reader class for XZ-compressed data, allowing you to access\nXZ-compressed data as if it was …\n"],["XZ::StreamWriter","","XZ/StreamWriter.html","","<p>An IO-like writer class for XZ-compressed data, allowing you to write\nuncompressed data to a stream which …\n"],["close","XZ::StreamReader","XZ/StreamReader.html#method-i-close","()","<p>Closes this StreamReader instance. Don’t use it afterwards anymore.\n<p>Return value\n<p>The total number of bytes …\n"],["close","XZ::StreamWriter","XZ/StreamWriter.html#method-i-close","()","<p>Closes this StreamWriter instance and flushes all internal buffers. Don’t\nuse it afterwards anymore. …\n"],["compress","XZ","XZ.html#method-c-compress","(str, compression_level = 6, check = :crc64, extreme = false)","<p>Compresses arbitrary data using the XZ algorithm.\n<p>Parameters\n<p>str &mdash; The data to compress.\n"],["compress_file","XZ","XZ.html#method-c-compress_file","(in_file, out_file, compression_level = 6, check = :crc64, extreme = false)","<p>Compresses <code>in_file</code> and writes the result to\n<code>out_file</code>.\n<p>Parameters\n<p>in_file &mdash; The path to the file to read from. …\n"],["compress_stream","XZ","XZ.html#method-c-compress_stream","(io, compression_level = 6, check = :crc64, extreme = false, &block)","<p>Compresses a stream of data into XZ-compressed data.\n<p>Parameters\n<p>io &mdash; The IO to read the data from. Must be …\n"],["decode_stream","XZ","XZ.html#method-c-decode_stream","(io, memory_limit = LibLZMA::UINT64_MAX, flags = [:tell_unsupported_check], &block)",""],["decompress","XZ","XZ.html#method-c-decompress","(str, memory_limit = LibLZMA::UINT64_MAX, flags = [:tell_unsupported_check])","<p>Decompresses data in XZ format.\n<p>Parameters\n<p>str &mdash; The data to decompress.\n"],["decompress_file","XZ","XZ.html#method-c-decompress_file","(in_file, out_file, memory_limit = LibLZMA::UINT64_MAX, flags = [:tell_unsupported_check])","<p>Decompresses <code>in_file</code> and writes the result to\n<code>out_file</code>.\n<p>Parameters\n<p>in_file &mdash; The path to the file to read …\n"],["decompress_stream","XZ","XZ.html#method-c-decompress_stream","(io, memory_limit = LibLZMA::UINT64_MAX, flags = [:tell_unsupported_check], &block)","<p>Decompresses a stream containing XZ-compressed data.\n<p>Parameters\n<p>io &mdash; The IO to read from. It must be opened …\n"],["encode_stream","XZ","XZ.html#method-c-encode_stream","(io, compression_level = 6, check = :crc64, extreme = false, &block)",""],["new","XZ::LZMAStream","XZ/LZMAStream.html#method-c-new","(*args)","<p>This method does basicly the same thing as the LZMA_STREAM_INIT macro of\nliblzma. Creates a new LZMAStream …\n"],["new","XZ::Stream","XZ/Stream.html#method-c-new","(delegate_io)","<p>Creates a new instance of this class. Don’t use this directly, it’s only\ncalled by subclasses’ ::new …\n"],["new","XZ::StreamReader","XZ/StreamReader.html#method-c-new","(delegate, memory_limit = XZ::LibLZMA::UINT64_MAX, flags = [:tell_unsupported_check])","<p>Creates a new StreamReader instance. If you pass an IO, remember you have\nto close <strong>both</strong> the resulting …\n"],["new","XZ::StreamWriter","XZ/StreamWriter.html#method-c-new","(delegate, compression_level = 6, check = :crc64, extreme = false)","<p>Creates a new StreamWriter instance. The block form automatically calls the\n#close method when the block …\n"],["pos","XZ::StreamReader","XZ/StreamReader.html#method-i-pos","()","<p>Total number of output bytes provided to you yet.\n"],["pos","XZ::StreamWriter","XZ/StreamWriter.html#method-i-pos","()","<p>Total number of input bytes read so far from what you supplied to any\nwriter method.\n"],["raise_if_necessary","XZ::LZMAError","XZ/LZMAError.html#method-c-raise_if_necessary","(val)","<p>Raises an appropriate exception if <code>val</code> isn&#39;t a liblzma\nsuccess code.\n"],["rewind","XZ::StreamReader","XZ/StreamReader.html#method-i-rewind","()","<p>Instrcuts liblzma to immediately stop decompression, rewinds the wrapped IO\nobject and reinitalizes the …\n"],["tell","XZ::StreamReader","XZ/StreamReader.html#method-i-tell","()",""],["tell","XZ::StreamWriter","XZ/StreamWriter.html#method-i-tell","()",""],["COPYING","","COPYING.html","","<p>(The MIT License)\n<p>Basic liblzma-bindings for Ruby.\n<p>Copyright © 2011-2013 Marvin Gülker et al.\n"],["HISTORY","","HISTORY_rdoc.html","","<p>0.2.1\n<p>Build the gem properly on Ruby 2.0+ (PR #8 by Nana Sakisaka (saki7))\n<p>Release the GIL when interfacing …\n"],["README","","README_rdoc.html","","<p>ruby-xz\n<p><strong>ruby-xz</strong> is a basic binding to the famous liblzma library,\nbest known for the extreme compression-ratio …\n"]]}}